package com.hskj.repeatFilter2;

import java.util.HashSet;
import java.util.Set;

import org.slf4j.Logger;

import com.hskj.log.CommonLogFactory;
import com.hskj.repeatFilter.IFilter;

import redis.clients.jedis.HostAndPort;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.JedisSentinelPool;

/**
 * 通过Redis完成重复过滤拦截功能
 * @author 1307365
 *
 */
public class RedisRepeatMsgFilter implements IFilter {
	private  Logger log = CommonLogFactory.getCommonLog(RedisRepeatMsgFilter.class);
	private static boolean is_filter = true;
	private static long lastFilterTime = 0l;
	private static long lastFilterTime_2 = 0l;
	private static boolean is_filter_2 = true;
	private String sentinels = "";
	private String masterName ="mymaster";
	private String redisServerIp ="";
	private String pwd ="";
	private int redisServerPort = 6379;
	private String poolType ="";
	private JedisSentinelPool JedisSentinelPool;
	private JedisPool jedisPool = null;
	private int maxTotal=500;
	private int maxIdle=10;
	private int maxWaitMillis=200;
	
	private  JedisSentinelPool getSentinelPool() {
		if (JedisSentinelPool == null) {
			Set<String> set = new HashSet<String>();
			String[] sentinel = sentinels.split(";");
			for (String ip :sentinel) {
				String[] address = ip.split(":");
				set.add(new HostAndPort(address[0],Integer.valueOf(address[1])).toString());
			}
			JedisPoolConfig config = new JedisPoolConfig();
			// 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
			config.setMaxTotal(maxTotal);
			// 控制一个pool最多有多少个状态为idle(空闲的)的jedis实例。
			config.setMaxIdle(maxIdle);
			// 表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；
			config.setMaxWaitMillis(maxWaitMillis);
			// 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；
			config.setTestOnBorrow(true);
			if(pwd!=null&&!"".equals(pwd)){
				JedisSentinelPool = new JedisSentinelPool(masterName, set, config,pwd);
			}else{
				JedisSentinelPool = new JedisSentinelPool(masterName, set, config);
			}
		}
		return JedisSentinelPool;
	}
	public  JedisPool getPool() {
		if (jedisPool == null) {
			JedisPoolConfig config = new JedisPoolConfig();
			// 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
			config.setMaxTotal(maxTotal);
			// 控制一个pool最多有多少个状态为idle(空闲的)的jedis实例。
			config.setMaxIdle(maxIdle);
			// 表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；
			config.setMaxWaitMillis(maxWaitMillis);
			// 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；
			config.setTestOnBorrow(true);
			if(pwd!=null&&!"".equals(pwd)){
				jedisPool = new JedisPool(config, redisServerIp, redisServerPort,maxWaitMillis,pwd);
			}else{
				jedisPool = new JedisPool(config, redisServerIp, redisServerPort,maxWaitMillis);
			}
			
		}
		return jedisPool;
	}
	 
	public Jedis getJedis() {
		Jedis jedis = null;
		try {
			if("sentinel".equals(poolType)){
				if(JedisSentinelPool==null){
					getSentinelPool();
				}
				jedis = JedisSentinelPool.getResource();
			}else {
				if(jedisPool==null){
					getPool();
				}
				jedis = jedisPool.getResource();
			}
			
		} catch (Exception e) {
			StringBuffer sb = new StringBuffer();
			sb.append("sentinels:").append(sentinels).append(",");
			sb.append("masterName:").append(masterName).append(",");
			sb.append("redisServerIp:").append(redisServerIp).append(";");
			sb.append("redisServerPort:").append(redisServerPort).append(";");
			log.error("get more Jedis-hashCode: "  + "; " + sb.toString(), e);
		}
		return jedis;
	}
	public void returnJedis(Jedis jedis) {
		if (jedis != null) {
			try {
				jedis.close();
			} catch (Exception e) {
				log.error("",e);
			}
		}

	}
	/***
	 * poolType@sentinels@masterName
	 * poolType@redisServerIp@redisServerPort
	 */
	@Override
	public void doStart(String filterName) {
		try {
			//遵守以下传递参数规定
			if(filterName!=null){
				String[] array = filterName.split("@");
				poolType = array[0];
				if("sentinel".equalsIgnoreCase(poolType)){
					sentinels = array[1];
					masterName = array[2];
					//密码不为空时
					if(array.length > 3){
						pwd = array[3];
					}
				}else {
					redisServerIp =array[1];
					redisServerPort = Integer.parseInt(array[2]);
					//密码不为空时
					if(array.length > 3){
						pwd = array[3];
					}
				}
			}
			getJedis();
		    log.info("-------------- JedisSentinelPool("+sentinels+") has not init -------------- ");
		} catch (Exception e) {
			log.error("filterName["+filterName+"]",e);
		}

	}

	@Override
	public void doStop() {
		log.info("-------------- JedisSentinelPool  destroy -------------- ");
		if(JedisSentinelPool!=null){
			JedisSentinelPool.destroy();
		}
		
		if(jedisPool!=null){
			jedisPool.destroy();
		}
		
	}

	 
	@Override
	public Object doFilter(String key_content, int idleSecond, int repeatTime) {
		Jedis jedis = null;
		String result = null;
		try {
			jedis = getJedis();
			String memcache_value = "";
			long amount = 0;
			long current_time = System.currentTimeMillis();
			if (!is_filter && (current_time - lastFilterTime) > 10 * 1000) {
				// 如果已经10秒钟没有过滤了，再尝试开始过滤
				is_filter = true;
			}
			if (is_filter) {
				long t0 = System.currentTimeMillis();
				boolean haskey_content = false;
				String setResult = null;
				// 1.首先判断短信内容是否已经加入过滤
				try {
					haskey_content = jedis.exists(key_content);
				} catch (Exception e) {
					log.error("", e);
				}

				if (!haskey_content) {
					// 短信模板不在缓存中,直接允许下发，长短信把缓存信息
					memcache_value = CacheValueUtil.getValueElement(1, current_time);
				} else {
					/**
					 * 取出缓存的关键字，命中的次数 1.若没有达到命中次数，短信内容是否已经在缓存中： 
					 * （1）若在缓存中本次过滤不在进行次数累加
					 * （2）若没在缓存开始计数+1 2.达到命中上限，则直接拦截
					 */
					memcache_value = (String) jedis.get(key_content);
					if (memcache_value != null) {
						amount = CacheValueUtil.getValue(memcache_value, 0); // 已经存在的次数
						long frist_time = CacheValueUtil.getValue(memcache_value, 1);
						long time_difference = (current_time - frist_time) / 1000; // 过滤时间间隔

						if (time_difference <idleSecond) {
							if (amount >= repeatTime) {
								result = amount + "_" + memcache_value;
								memcache_value = CacheValueUtil.getValueElement((amount + 1), current_time);
							} else {
								// 不拦截 计数+1
								memcache_value = CacheValueUtil.getValueElement((amount + 1), current_time);
							}
						} else {
							memcache_value = CacheValueUtil.getValueElement(1,current_time);
						}
					}

				}
				try {
					// 重置拦截内容
					setResult = jedis.setex(key_content, idleSecond, memcache_value);
				} catch (Exception e) {
					log.error("", e);
				}

				if (!"OK".equalsIgnoreCase(setResult)) {
					is_filter = false;
				}
				long t1 = System.currentTimeMillis();
				lastFilterTime = t1;
				if (t1 - t0 > 100) {
					log.info("[repeatFilter1]filter time out[" + (t1 - t0) + "] ms! -------------- ,key= " + key_content);
				}
			}
			
		} catch (Exception e) {
			log.error("doFilter", e);
		}finally{
			returnJedis(jedis);
		}
		
		return result;
	}
	
	@Override
	public Object doFilter(int pk_toal,String key_content, String key_word, int idleSecond,int repeatTime) {
		String result = null;
		Jedis jedis = null;
		try {
			jedis = getJedis();
			String memcache_value = "";
			String longsms_value = "1";
			int tmp_longsms_value = 1;
			long amount = 0;
			long current_time = System.currentTimeMillis();
			if(!is_filter_2 && (current_time - lastFilterTime_2) > 10 * 1000){
				//如果已经10秒钟没有过滤了，再尝试开始过滤
				is_filter_2 = true;
			}
			if(is_filter_2){
				long t0 = System.currentTimeMillis();
				boolean haskey_content= false ;
				boolean haskey_word= false ;
				String setResult = null;
				 
				//1.首先判断短信内容是否已经加入过滤
				try {
					haskey_content = jedis.exists(key_content);
					haskey_word = jedis.exists(key_word);
					log.debug("[repeatFilter2]1.1 do client.keyExists["+key_content+"]-> "+haskey_content);
					log.debug("[repeatFilter2]1.2 do client.keyExists["+key_word+"]-> "+haskey_word);
				} catch (Exception e) {
					log.error("",e);
				}
				
				if (!haskey_word) {
					//短信模板不在缓存中,直接允许下发，长短信把缓存信息
					memcache_value = CacheValueUtil.getValueElement(1, current_time);
					if(pk_toal>1){
						//setResult = client.set(key_content, "1", new Date(idleSecond * 1000)); 
						setResult = jedis.setex(key_content, idleSecond, "1");
					} 
					
				}else {
					/**
					 * 取出缓存的关键字，命中的次数
					 * 1.若没有达到命中次数，短信内容是否已经在缓存中：
					 * （1）若在缓存中本次过滤不在进行次数累加
					 * （2）若没在缓存开始计数+1
					 * 2.达到命中上限，则直接拦截
					 */
					memcache_value = (String) jedis.get(key_word);
					try {
						if(haskey_content){
							longsms_value =  (String) jedis.get(key_content);
						} 
						
						tmp_longsms_value = Integer.parseInt(longsms_value);
					} catch (Exception e) {
						log.error("",e);
					}
					
					if (memcache_value != null) {
						//log.debug("[repeatFilter2]memcache_value: "+memcache_value);
						amount = CacheValueUtil.getValue(memcache_value,0); //已经存在的次数
						long frist_time = CacheValueUtil.getValue(memcache_value,1);
						long time_difference = (current_time - frist_time) / 1000; //过滤时间间隔

						log.debug("[repeatFilter2] ----------  距离最早下发记录的时间差：" + time_difference + " 秒");
						log.debug("[repeatFilter2] amount="+amount+", time_difference="+time_difference+",idleSecond="+idleSecond+",repeatTime="+repeatTime);
						
						if(time_difference < idleSecond){
							if(amount >= repeatTime){
								if(pk_toal>1){
									//长短信没有被缓存，直接拦截
									if(!haskey_content){
										result = amount + "_" + memcache_value;
										memcache_value = CacheValueUtil.getValueElement((amount+1), current_time);
									}else {
										tmp_longsms_value++;
										//int num = (tmp_longsms_value+pk_toal-1)/pk_toal;
										int mode = (tmp_longsms_value%pk_toal);
										if(mode==0){
											memcache_value = CacheValueUtil.getValueElement(1+amount, current_time);
										} 
										if(tmp_longsms_value > (repeatTime-1)*pk_toal){
											result = amount + "_" + memcache_value;
										 }
										//setResult = client.set(key_content, String.valueOf(tmp_longsms_value), new Date(idleSecond * 1000)); 
										setResult = jedis.setex(key_content, idleSecond, String.valueOf(tmp_longsms_value));
										//System.out.println("1.num="+num+",mode="+mode+",tmp_longsms_value="+tmp_longsms_value);
									}
								}else {
									//短短信直接拦截
									result = amount + "_" + memcache_value;
									memcache_value = CacheValueUtil.getValueElement((amount+1), current_time);
								}
							}else{
								if(pk_toal>1){
									//长短信放入缓存中 并计数+1
									if(!haskey_content){
										//setResult = client.set(key_content, "1", new Date(idleSecond * 1000)); 
										setResult = jedis.setex(key_content, idleSecond, "1");
										memcache_value = CacheValueUtil.getValueElement((amount+1), current_time);
									}else {
										tmp_longsms_value++;
										int num = (tmp_longsms_value+pk_toal-1)/pk_toal;
										int mode = (tmp_longsms_value%pk_toal);
										if(mode==0&&num>1){
										   memcache_value = CacheValueUtil.getValueElement(1+amount, current_time);
										} 
										setResult = jedis.setex(key_content, idleSecond,  String.valueOf(tmp_longsms_value));
										//setResult = client.set(key_content, String.valueOf(tmp_longsms_value), new Date(idleSecond * 1000)); 
									}
								}else {
									//短短信直不拦截 计数+1
									memcache_value = CacheValueUtil.getValueElement((amount+1), current_time);
								}
							}
						}else {
							log.debug("[repeatFilter2]首条下发成功记录超时，移除,key= "+key_word);
							memcache_value = CacheValueUtil.getValueElement(1,current_time);
							//setResult = client.set(key_content, "1", new Date(idleSecond * 1000));
							setResult = jedis.setex(key_content, idleSecond, "1");
						}
					}
					 
				}
				try {
					 //重置拦截内容
					//setResult = client.set(key_word, memcache_value, new Date(idleSecond * 1000));
					setResult = jedis.setex(key_word, idleSecond, memcache_value);
				} catch (Exception e) {
					log.error("",e);
				}
				
				if(!"OK".equalsIgnoreCase(setResult)){
					log.warn("[repeatFilter2]setResult_is_false ,不再进行拦截 ,key= "+key_word);
					is_filter_2 = false;
				}
				long t1 = System.currentTimeMillis();
				lastFilterTime_2 = t1;
				if(t1 - t0 > 100){
					log.info("[repeatFilter2]filter time out["+(t1 - t0 )+"] ms! -------------- ,key= "+key_word);
				}
			}
			log.debug("4.[repeatFilter2] get ["+key_content+"],memcache_value="+memcache_value+",tmp_longsms_value="+tmp_longsms_value+",amount="+amount+",repeatTime="+repeatTime+",result-> ["+result+"]");
		} catch (Exception e) {
			log.error("doFilter", e);
		}finally{
			returnJedis(jedis);
		}
		return result;
	}
}
