package com.hskj.monitor;


import org.slf4j.Logger;
import org.springframework.stereotype.Service;

import com.hskj.control.Stoppable;
import com.hskj.datacenter.DataCenter;
import com.hskj.log.CommonLogFactory;

@Service
public class MonitorThread extends Thread implements Stoppable{
	private Logger monitor_log = CommonLogFactory.getLog("monitor");
	private boolean run = true;
	private final long time = 1000*60l;
	private long old_time = System.currentTimeMillis();

	
	public void run(){
		while (run) {
			try {
				if(System.currentTimeMillis()-old_time > time){
					 old_time = System.currentTimeMillis();
					 DataCenter.print();
					 printMerry();
				 } 
				sleep(3*1000L);
			} catch (Exception e) {
			}
		 
		}
		 
	}
	
  
	 
	
	private void printMerry(){
		StringBuffer sb = new StringBuffer();
		sb.append("\n\r-------------------------MemorySize↓------------------------------\n\r");
		Runtime run = Runtime.getRuntime();
		long max = run.maxMemory();
		long total = run.totalMemory();
		long free = run.freeMemory();
		long usable = max - total + free;
		sb.append("最大内存 Memory.Size=" + max / 1024 / 1024 + " m\n\r").
		append("已分配内存   Memory.Size=" + total / 1024 / 1024 + " m\n\r").
		append("已分配内存中的剩余空间  Memory.Size=" + free / 1024 / 1024 + " m\n\r").
		append("最大可用内存  Memory.Size=" + usable / 1024 / 1024 + " m\n\r");
		sb.append("*************************************************\n\r");
		monitor_log.info(sb.toString());
	}
 
	public boolean doStop() {
		run = false;
		interrupt();
		return true;
	}

}
