package sunnyday.controller.filter;

import com.danga.MemCached.MemCachedClient;
import com.danga.MemCached.SockIOPool;

public class MemcachePool {

	private boolean isReady = false;
	private boolean isStart = false;
	private SockIOPool pool = null;

	//可用服务器列表 多个“,”分割 
	//public final static String[] ADDR = { "127.0.0.1:12000"};
	//可用服务器权重 
	//public final static Integer[] WEIGHTS = { 1 };

	// 初始化连接数
	public final static int INIT_CONN = 1;
	// 最小连接数
	public final static int MIN_CONN = 0;
	// 最大连接数
	public final static int MAX_CONN = 2;
	// 连接池最长等待时间
	public final static long MAX_IDLE = 5 * 60 * 1000L;
	// 维护线程睡眠时间，监控连接数目及空闲时间等参数 ，维护连接关闭创建
	public final static long MAINT_SLEEP = 60 * 1000L;
	// 是否采用Nagle算法
	public final static boolean NAGLE = false;
	// socket 读取等待超时值
	public final static int SET_SOCKET_TO = 20;
	// socket 连接等待超时值
	public final static int SET_SOCKET_CONNECT_TO = 20;

	public MemcachePool() {
		super();
	}

	public MemcachePool(String[] addr, Integer[] weights) {

		pool = SockIOPool.getInstance();
		pool.setServers(addr);
		pool.setWeights(weights);
		pool.setInitConn(INIT_CONN);
		pool.setMinConn(MIN_CONN);
		pool.setMaxConn(MAX_CONN);
		pool.setMaxIdle(MAX_IDLE);
		pool.setMaintSleep(MAINT_SLEEP);
		pool.setNagle(NAGLE);
		pool.setSocketTO(SET_SOCKET_TO);
		pool.setSocketConnectTO(SET_SOCKET_CONNECT_TO);

		isReady = true;

	}

	public MemCachedClient getCachedClient() {
		return isReady ? new MemCachedClient() : null;
	}

	public void startUp() {
		pool.initialize();
		this.isStart = true;
	}

	public void shutdown() {
		pool.shutDown();
		this.isStart = false;
	}

	public boolean isStart() {
		return isStart;
	}

	public void setStart(boolean isStart) {
		this.isStart = isStart;
	}

	public boolean isReady() {
		return isReady;
	}

	public void setReady(boolean isReady) {
		this.isReady = isReady;
	}

}
