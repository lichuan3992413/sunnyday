package com.hskj.dao.oracle;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Repository;

import com.alibaba.fastjson.JSON;
import com.hskj.dao.IMessageDAO;
import com.hskj.dao.commonUtils.DBUtil;
import com.hskj.dao.commonUtils.ResultUtil;
import com.hskj.dataCenter.cache.ErrCodeCache;
import com.hskj.dataCenter.cache.MobileAreaCache;
import com.hskj.form.BatchModel;
import com.hskj.form.CheckMessage;
import com.hskj.form.CheckMsgBatch;
import com.hskj.form.DeliverBean;
import com.hskj.form.ErrCode;
import com.hskj.form.GroupCheckForm;
import com.hskj.form.ReportBean;
import com.hskj.form.SendMessageTiming;
import com.hskj.form.SmsMessage;
import com.hskj.form.SubmitMessageArriveReply;
import com.hskj.form.TmpInformCust;
import com.hskj.utils.DaoUtil;
import com.hskj.utils.DateUtil;
import com.hskj.utils.Md5Util;

@Repository(value = "oracle_MessageDAO")
public class MessageDAO extends SimpleDAO implements IMessageDAO {
	@Resource
	protected MobileAreaCache mobileAreaCache;
	public List<ReportBean> queryReportsByStatus(int send_status) {
		List<ReportBean> resultList = new ArrayList<ReportBean>();
		String sql = "select  sn, user_id, td_code, sp_number, mobile, msg_id, status, try_times, insert_time, update_time, fail_desc, err , stat, submit_time,send_status,rpt_return_time,rpt_match_time,rpt_ready_push_time,rpt_pushed_time,sub_seq,rpt_seq from  report_message where send_status= ? and ROWNUM<= 500";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.setInt(1, send_status);
			rs = ps.executeQuery();
			resultList = ResultUtil.assemble(rs, ReportBean.class);
		} catch (Exception e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}
		return resultList;
	}

	public List<DeliverBean> queryDeleversByStatus(int send_status) {
		List<DeliverBean> resultList = new ArrayList<DeliverBean>();
		String sql = "select sn, user_id, sp_number, mobile, msg_content, status, try_times, insert_time, update_time, sub_msg_id, pk_total, pk_number, msg_format,send_status,is_encode,province,city,src_sp_number ,ext_code from  deliver_message where send_status= ? and ROWNUM<= 500";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.setInt(1, send_status);
			rs = ps.executeQuery();
			resultList = ResultUtil.assemble(rs, DeliverBean.class);
		} catch (Exception e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}
		return resultList;
	}

	public int deleteTableSendStatus(String snList, String tableName,
			int sendStatus) {
		int result = 0;
		// 这样写是最垃圾的写法，一点不解偶
		String sql = "delete from  " + tableName + " where sn in " + snList;

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			result = ps.executeUpdate();
			conn.commit();
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}
		return result;
	}

	public List<SmsMessage> querySubmitMessageTest(int limit) {
		List<SmsMessage> resultList = new ArrayList<SmsMessage>();
		String sql = "select submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, mobile, msg_content, msg_id, insert_time, update_time, status, sub_msg_id, pknumber, pktotal, price, charge_count, msg_format, dest_flag, msg_receive_time, country_cn, ori_mobile, is_encode,complete_content"
				+ " from submit_message_test where status = 0 and ROWNUM<= "
				+ limit;// 时间对应拼接超时处理的时间

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			resultList = ResultUtil.assemble(rs, SmsMessage.class);
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}
		return resultList;
	}


	public void insertIntoSubmitMessageLong(List<?> smsList, String tableName) {
		if (smsList != null && smsList.size() > 0) {
			String sql = "";
			if (tableName.indexOf("cache") != -1) {
				sql = "insert into "
						+ tableName
						+ "(submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code," +
								" sp_number, filter_flag, mobile, msg_content, msg_id, insert_time, update_time, " +
								"status, pknumber, pktotal, sub_msg_id, price, charge_count, msg_format, dest_flag," +
								" msg_receive_time, country_cn, ori_mobile, signature,istest,province, city,extraFields)"
						+ "values(s_submit_message_long_cache.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, sysdate, " +
								"sysdate, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)";
			} else {
				sql = "insert into "
						+ tableName
						+ "(submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, " +
								"sp_number, filter_flag, mobile, msg_content, msg_id, insert_time, update_time, " +
								"status, pknumber, pktotal, sub_msg_id, price, charge_count, msg_format, dest_flag, " +
								"msg_receive_time, country_cn, ori_mobile, signature,istest,province, city,extraFields)"
						+ "values(s_submit_message_long.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, sysdate, sysdate, " +
								"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)";

			}
			Connection conn = null;
			PreparedStatement insql = null;
			try {
				conn = dataSource.getConnection();
				conn.setAutoCommit(false);
				insql = conn.prepareStatement(sql);
				for (Object obj : smsList) {
					SmsMessage each = (SmsMessage) obj;
					insql.setInt(1, each.getUser_sn());// user_sn
					insql.setString(2, each.getUser_id());
					insql.setString(3, each.getService_code());
					insql.setString(4, each.getExt_code());
					insql.setString(5, each.getUser_ext_code());
					insql.setString(6, each.getTd_code());
					insql.setString(7, each.getSp_number());
					insql.setInt(8, each.getFilter_flag());
					insql.setString(9, each.getMobile());
					insql.setString(10, each.getMsg_content());
					insql.setString(11, each.getMsg_id());
					insql.setInt(12, each.getStatus());
					insql.setInt(13, each.getPknumber());
					insql.setInt(14, each.getPktotal());
					insql.setInt(15, each.getSub_msg_id());
					insql.setDouble(16, each.getPrice());
					insql.setInt(17, each.getCharge_count());
					insql.setInt(18, each.getMsg_format());
					insql.setString(19, each.getDest_flag());
					insql.setString(20, each.getMsg_receive_time());
					insql.setString(21, each.getCountry_cn());
					insql.setString(22, each.getOri_mobile());
					insql.setString(23, each.getSignature());
					insql.setString(24, each.getIstest());
					// 写入省市
					DaoUtil.setArea(mobileAreaCache.getMobileArea(), insql, each, 25, 26);
					//todo 这里比mysql多了两个字段
					//必达短信标识和批次号
					/*insql.setInt(27, Integer.valueOf(String.valueOf(each.getExtraField("is_must_arrive"))));
					insql.setString(28, (String)each.getExtraField("arrive_number"));*/
					
					   String extraStr = "";
		                if(each.getExtraFields()!=null){
		                	extraStr = JSON.toJSONString(each.getExtraFields());
		                }
		                insql.setString(27, extraStr);
					
					insql.addBatch();
				}
				insql.executeBatch();
				conn.commit();
			} catch (SQLException e) {
				log.error("SQL = " + sql, e);
			} finally {
				DBUtil.freeConnection(conn, insql);
			}
		}
	}

	public List<SmsMessage> querySplitLongMsg(int limit) {
		List<SmsMessage> resultList = new ArrayList<SmsMessage>();
		String sql = "select submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, filter_flag, mobile, msg_content, msg_id, insert_time, update_time, status, pknumber, pktotal, sub_msg_id, price, charge_count, msg_format, dest_flag, msg_receive_time, country_cn, ori_mobile, signature,istest,extraFields"
				+ " from submit_message_long  where insert_time > sysdate - 1  and ROWNUM<= "
				+ limit + " order by mobile, insert_time desc ";// 时间对应拼接超时处理的时间

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			resultList = com.hskj.utils.ResultUtil.assemble(rs, SmsMessage.class);
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}
		return resultList;
	}

	public void insertIntoSubmitMessageCheck(List<Object> smsList) {
		StringBuffer sb = new StringBuffer();
		if (smsList != null && smsList.size() > 0) {
			sb.append("insert_into_submit_message_check: ");
			String sql = "insert into submit_message_check("
					+ "sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, filter_flag, mobile, msg_content, msg_id, "
					+ "insert_time, update_time, status, response, fail_desc, pknumber, pktotal, sub_msg_id, price, charge_count, msg_format, dest_flag, "
					+ "msg_receive_time, msg_deal_time, check_user, cache_sn, md5_index, complete_content, country_cn, ori_mobile"
					+ ") values(s_submit_message_check.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, sysdate, sysdate, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,  sysdate, ?, ?, ?, ?, ?, ?)";

			Connection conn = null;
			PreparedStatement insql = null;
			try {
				conn = dataSource.getConnection();
				conn.setAutoCommit(false);
				insql = conn.prepareStatement(sql);
				for (Object obj : smsList) {
					SmsMessage each = (SmsMessage) obj;
					sb.append(each);
					insql.setInt(1, each.getUser_sn());
					insql.setString(2, each.getUser_id());
					insql.setString(3, each.getService_code());
					insql.setString(4, each.getExt_code());
					insql.setString(5, each.getUser_ext_code());
					insql.setString(6, each.getTd_code());
					insql.setString(7, each.getSp_number());
					insql.setInt(8, each.getFilter_flag());
					insql.setString(9, each.getMobile());
					insql.setString(10, each.getMsg_content());
					insql.setString(11, each.getMsg_id());
					insql.setInt(12, each.getStatus());
					insql.setInt(13, each.getResponse());
					insql.setString(14, each.getFail_desc());
					insql.setInt(15, each.getPknumber());
					insql.setInt(16, each.getPktotal());
					insql.setInt(17, each.getSub_msg_id());
					insql.setDouble(18, each.getPrice());
					insql.setInt(19, each.getCharge_count());
					insql.setInt(20, each.getMsg_format());
					insql.setString(21, each.getDest_flag());
					insql.setString(22, each.getMsg_receive_time());
					// insql.setString(23, each.getMsg_deal_time());
					insql.setString(23, each.getCheck_user());
					insql.setInt(24, each.getCache_sn());
					insql.setString(25, each.getMd5_index());
					insql.setString(26, each.getComplete_content());
					insql.setString(27, each.getCountry_cn());
					insql.setString(28, each.getOri_mobile());
					//todo 这里也是
					//必达短信标识和批次号
					/*insql.setInt(29, Integer.valueOf(String.valueOf(each.getExtraField("is_must_arrive"))));
					insql.setString(30, (String)each.getExtraField("arrive_number"));*/
					insql.addBatch();
				}
				int[] count = insql.executeBatch();
				if (count.length != smsList.size()) {
					log.warn("带插入条数：[" + smsList.size() + "]" + "实际插入条数：["
							+ count + "] " + sb.toString());
				}
				conn.commit();
			} catch (SQLException e) {
				log.error("SQL = " + sql, e);
			} finally {
				DBUtil.freeConnection(conn, insql);
			}
		}
	}

	/**
	 * 插入待审核表
	 */
	public void insertIntoCheckMessage(List<Object> smsList) {
		StringBuffer sb = new StringBuffer();
		if (smsList != null && smsList.size() > 0) {
			sb.append("insert_into_check_message: ");
			String sql = "insert into check_message ("
					+ "sn, batch_number, user_id, service_code, mobile, msg_content, msg_id, submit_ext_code, insert_time, update_time, send_time,timing_time, check_status,check_user,move_flag,is_interface_send,sms_message "
					
					+ ") values(s_check_message.nextval, ?, ?, ?, ?, ?, ?, ?, to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'), to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'), to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'), ?, ?, ?,0,0,?)";

			Connection conn = null;
			PreparedStatement insql = null;
			try {
				conn = dataSource.getConnection();
				conn.setAutoCommit(false);
				insql = conn.prepareStatement(sql);
				for (Object obj : smsList) {
					SmsMessage each = (SmsMessage) obj;
					sb.append(each);
					String batch_number = (String)each.getExtraField("batch_number");
					insql.setString(1,batch_number);
					insql.setString(2, each.getUser_id());
					insql.setString(3, each.getService_code());
					insql.setString(4, each.getMobile());
					insql.setString(5, each.getMsg_content());
					insql.setString(6, each.getMsg_id());
					insql.setString(7, each.getUser_ext_code());
					insql.setString(8, (String)each.getExtraField("timing_time"));
					insql.setInt(9, 0);
					insql.setString(10, each.getCheck_user());
					String smsStr = JSON.toJSONString(each);
					insql.setString(11, smsStr);
					
					insql.addBatch();
				}
				int[] count = insql.executeBatch();
				if (count.length != smsList.size()) {
					log.warn("带插入条数：[" + smsList.size() + "]" + "实际插入条数：["
							+ count + "] " + sb.toString());
				}
				conn.commit();
			} catch (SQLException e) {
				log.error("SQL = " + sql, e);
			} finally {
				DBUtil.freeConnection(conn, insql);
			}
		}
	}
	
	
	/**
	 * 插入待审核批次表
	 */
	public void insertCheckMessageBatch(Map<String, CheckMsgBatch> batch_message_map) {
		StringBuffer sb = new StringBuffer();
		Collection<CheckMsgBatch> smsList = batch_message_map.values();
		if (smsList != null && smsList.size() > 0) {
			sb.append("insert_into_check_msg_batch: ");
			String sql = "insert into check_msg_batch ("
					+ "sn, batch_number, user_id, send_type, batch_count, batch_content, insert_time, update_time, check_time, timing_time,  check_status,check_user,md5_index,remark "
					
					+ ") values(s_check_msg_batch.nextval, ?, ?, ?, ?, ?,  to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'), to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'), to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'), ?, 0, ?,?,?)";

			Connection conn = null;
			PreparedStatement insql = null;
			try {
				conn = dataSource.getConnection();
				conn.setAutoCommit(false);
				insql = conn.prepareStatement(sql);
				for (CheckMsgBatch each : smsList) {
					sb.append(each);
					insql.setString(1,each.getBatch_number());
					insql.setString(2, each.getUser_id());
					insql.setInt(3, each.getSend_type());
					insql.setInt(4, each.getBatch_count());
					insql.setString(5, each.getBatch_content());
					insql.setString(6, each.getTiming_time());
					insql.setString(7, each.getCheck_user());
					insql.setString(8, each.getMd5_index());
					insql.setString(9, each.getRemark());
					insql.addBatch();
				}
				int[] count = insql.executeBatch();
				if (count.length != smsList.size()) {
					log.warn("带插入条数：[" + smsList.size() + "]" + "实际插入条数：["
							+ count + "] " + sb.toString());
				}
				conn.commit();
			} catch (SQLException e) {
				log.error("SQL = " + sql, e);
			} finally {
				DBUtil.freeConnection(conn, insql);
			}
		}
	}
	
	
	
	
	
	
	public void insertCheckGroupByBatch(List<Object> checkList) {
		String sql = "insert into submit_message_check_group"
				+ "(sn, user_sn,user_id, content, md5_index, td_code, count, status, check_user,fail_desc,response, check_time, check_sp_number,src_number)"
				+ " values(s_submit_message_check_group.nextval, ?,?,?,?,?,?,?,?,?,?,sysdate,?,?) on duplicate key update count = count + 1";
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);

			for (Object obj : checkList) {
				SmsMessage message = (SmsMessage) obj;
				if (message.getStatus() == 0) {
					ps.setInt(1, message.getUser_sn());
					ps.setString(2, message.getUser_id());
					ps.setString(3, message.getComplete_content());
					ps.setObject(4, message.getMd5_index());
					ps.setString(5, message.getTd_code());
					ps.setObject(6, message.getExtraField("mass_id"));// count
					ps.setInt(7, message.getStatus());
					ps.setObject(8, message.getCheck_user());
					ps.setString(9, message.getFail_desc());
					ps.setInt(10, message.getResponse());
					ps.setString(11, message.getSp_number());
					ps.setString(12, message.getSrc_number());
					ps.addBatch();
				}
			}
			ps.executeBatch();
			conn.commit();
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps);
		}
	}

	public boolean queryCheckedData(Map<Integer, List<SmsMessage>> resultMap,
			int limit) {
		boolean result = false;
		String sql = "select  submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, filter_flag, mobile, msg_content, msg_id, insert_time, update_time, status, response, fail_desc, pknumber, pktotal, sub_msg_id, price, charge_count, msg_format, dest_flag, msg_receive_time, msg_deal_time, check_user, cache_sn, md5_index, complete_content, country_cn, ori_mobile"
				+ " from submit_message_check where status = 1 or status = 2 and ROWNUM<= "
				+ limit + " order by submit_sn ";

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet resultSet = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			resultSet = ps.executeQuery();
			while (resultSet.next()) {
				SmsMessage message = com.hskj.utils.ResultUtil.assembleOneBean(resultSet,
						SmsMessage.class);
				message.setMsg_deal_time(DateUtil.currentTimeToMs());
				resultMap.get(message.getStatus()).add(message);
				result = true;
			}
		} catch (Exception e) {
			log.error("SQL = " + sql, e);
		} finally {

			DBUtil.freeConnection(conn, ps, resultSet);
		}
		return result;
	}

	public List<GroupCheckForm> queryCheckedMsgInGroupTable() {
		List<GroupCheckForm> resultList = new ArrayList<GroupCheckForm>();
		// or status = 11 or status = 12 暂且不处理
		String sql = "select sn, user_sn, check_sp_number, content, md5_index, td_code, count,manual_count, status, check_user, check_time,fail_desc"
				+ " from submit_message_check_group where status = 1 or status = 2 ";

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();

			while (rs.next()) {
				GroupCheckForm tmpForm = new GroupCheckForm();
				tmpForm.setSn(rs.getInt("sn"));
				tmpForm.setUser_sn(rs.getInt("user_sn"));
				tmpForm.setContent(rs.getString("content"));
				tmpForm.setMd5_index(rs.getString("md5_index"));
				tmpForm.setTd_code(rs.getString("td_code"));
				tmpForm.setCount(rs.getInt("count"));
				tmpForm.setManual_count(rs.getInt("manual_count"));
				tmpForm.setStatus(rs.getInt("status"));
				tmpForm.setCheck_sp_number(rs.getString("check_sp_number"));
				tmpForm.setCheck_user(rs.getString("check_user"));
				tmpForm.setCheck_time(rs.getString("check_time"));
				tmpForm.setFail_desc(rs.getString("fail_desc"));
				resultList.add(tmpForm);
			}
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}
		return resultList;
	}

	public void updateCheckTableByMd5(List<GroupCheckForm> groupList) {
		// 多个条件一次更新更快呢？　 还是一次一条更快，可以验证一下，然后采用较为高效的办法
		if (groupList != null && groupList.size() > 0) {
			String sql = "update submit_message_check set status = ?, response = ?, check_user = ? ,fail_desc = ?, msg_deal_time = sysdate where md5_index = ?";
			Connection conn = null;
			PreparedStatement ps = null;
			try {
				conn = dataSource.getConnection();
				ps = conn.prepareStatement(sql);

				for (GroupCheckForm tmpForm : groupList) {
					// System.out.println("CheckTableByMd5: "+tmpForm);
					ps.setInt(1, tmpForm.getStatus());
					ps.setInt(2, tmpForm.getResponse());// response
					ps.setString(3, tmpForm.getCheck_user());

					if (tmpForm.getStatus() == 1) {// 审核通过
						ps.setString(4, tmpForm.getFail_desc() + "->人工通过");
					} else if (tmpForm.getStatus() == 2) {// 审核驳回
						ps.setString(4, tmpForm.getFail_desc() + "->人工驳回");
					} else {
						ps.setString(4, tmpForm.getFail_desc() + "-test");
					}
					ps.setString(5, tmpForm.getMd5_index());
					int er = ps.executeUpdate();
					conn.commit();
					if (er != tmpForm.getCount()) {
						log.warn("md5_index = [" + tmpForm.getMd5_index()
								+ "] group count is [" + tmpForm.getCount()
								+ "] --- really effact rows = [" + er + "]");
					}
				}
			} catch (SQLException e) {
				log.error("SQL = " + sql, e);
			} finally {
				DBUtil.freeConnection(conn, ps);
			}
		}
	}

	public void insertIntoGroupHistory(List<GroupCheckForm> groupList) {
		// String sql =
		// "insert into submit_msg_check_group_cache (sn, user_sn, content, md5_index, td_code, count,manual_count ,response,fail_desc, status,"
		// +
		// " check_user, check_time, check_sp_number) values(?,?,?,?,?,?,?,?,?,?,?,?,?) on duplicate key update count = count + ? , manual_count = if(status = ?,manual_count + ?, 1)";
		String sql = "insert into submit_msg_check_group_cache (sn, user_sn, content, md5_index, td_code, count,manual_count ,response,fail_desc, status,"
				+ " check_user, check_time, check_sp_number) values(?,?,?,?,?,?,?,?,?,?,?,?,?)";

		Connection conn = null;
		PreparedStatement ps = null;
		Connection conn1 = null;
		PreparedStatement ps1 = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);

			for (GroupCheckForm tmpForm : groupList) {
				if (tmpForm.getSn() != 0) {
					String isCount = "select count(1) count from submit_msg_check_group_cache where sn = "
							+ tmpForm.getSn();
					ResultSet rs = dataSource.getConnection().createStatement()
							.executeQuery(isCount);
					int count = rs.getInt(0);
					// 有的话，就要更新
					if (count > 0) {
						log.info("the count of submit_msg_check_group_cache is :"
								+ count);
						String sql1 = "update submit_msg_check_group_cache set count = count + ? , manual_count = if(status = ?,manual_count + ?, 1) where sn = ?";

						conn1 = dataSource.getConnection();
						ps1 = conn1.prepareStatement(sql1);
						ps1.setInt(1, tmpForm.getCount());
						ps1.setInt(2, tmpForm.getStatus());
						ps1.setInt(3, tmpForm.getManual_count());
						ps1.setInt(4, tmpForm.getSn());
						ps1.execute();
					}
				}
				ps.setInt(1, tmpForm.getSn());
				ps.setInt(2, tmpForm.getUser_sn());
				ps.setString(3, tmpForm.getContent());
				ps.setString(4, tmpForm.getMd5_index());
				ps.setString(5, tmpForm.getTd_code());
				ps.setInt(6, tmpForm.getCount());
				ps.setInt(7, tmpForm.getManual_count());

				ps.setInt(8, tmpForm.getResponse());
				ps.setString(9, tmpForm.getFail_desc());

				ps.setInt(10, tmpForm.getStatus());
				ps.setString(11, tmpForm.getCheck_user());
				ps.setString(12, tmpForm.getCheck_time());
				ps.setString(13, tmpForm.getCheck_sp_number());

				ps.addBatch();
			}
			ps.executeBatch();
			conn.commit();
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
			if (!hasTable("submit_msg_check_group_cache")) {
				try {
					// here can't ensure data insert into history, solve it
					// tomrrow[by this method, problem solved]
					dataSource
							.getConnection()
							.createStatement()
							.execute(
									"create table submit_msg_check_group_cache as select * from submit_message_check_group");
					insertIntoGroupHistory(groupList);
				} catch (SQLException e1) {
					log.error("SQL = " + sql, e1);
				}
			}
		} finally {
			DBUtil.freeConnection(conn, ps);
			DBUtil.freeConnection(conn1, ps1);
		}
	}

	public void insertIntoMassCache(List<GroupCheckForm> groupList) {
		String sql = "insert into submit_mass_message_cache (sn, user_sn, content, md5_index, td_code, count, status,"
				+ "response, fail_desc, check_user, check_time ,manual_count) values(?,?,?,?,?,?,?,?,?,?,?,?)"
				+ " on duplicate key update count = count + ?,check_time = ?, check_user = ?,"
				+ "status = ?, manual_count = if(status = ?,manual_count + ?, 1)";

		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);

			for (GroupCheckForm tmpForm : groupList) {
				boolean isIllegal = tmpForm.getResponse() == ErrCodeCache
						.getErrCode(ErrCode.codeName.illegalReject)
						.getResponse();
				if (tmpForm.getCount() < 2 || isIllegal)
					continue;// 违法驳回不进入缓存：response=123
				ps.setInt(1, tmpForm.getSn());
				ps.setInt(2, tmpForm.getUser_sn());
				ps.setString(3, tmpForm.getContent());
				ps.setString(4, tmpForm.getMd5_index());
				ps.setString(5, tmpForm.getTd_code());
				ps.setInt(6, tmpForm.getCount());
				ps.setInt(7, tmpForm.getStatus());
				ps.setInt(8, tmpForm.getResponse());
				ps.setString(9, tmpForm.getFail_desc());
				ps.setString(10, tmpForm.getCheck_user());
				ps.setString(11, tmpForm.getCheck_time());
				ps.setInt(12, tmpForm.getManual_count());

				ps.setInt(13, tmpForm.getCount());
				ps.setString(14, tmpForm.getCheck_time());
				ps.setString(15, tmpForm.getCheck_user());

				ps.setInt(16, tmpForm.getStatus());
				ps.setInt(17, tmpForm.getStatus());
				ps.setInt(18, tmpForm.getManual_count());
				ps.addBatch();
			}
			ps.executeBatch();
			conn.commit();
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps);
		}
	}

	public void deleteFormGroupTable(List<GroupCheckForm> groupList) {
		StringBuilder sb = new StringBuilder();
		for (GroupCheckForm each : groupList) {
			sb.append(each.getSn()).append(",");
		}
		sb.append(-1);
		String sql = "delete from submit_message_check_group where sn in ("
				+ sb.toString() + ")";
		super.executeUpdate(sql);
	}

	public boolean insertIntoSubmitMessageHistory(List<Object> list) {
	
		boolean result = false;
		String sql = "insert into submit_message_send_history "
				+ "(sn, submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, filter_flag, mobile, msg_content, msg_id, "
				+ "insert_time, update_time, status, response, fail_desc, tmp_msg_id, stat_flag, pknumber, pktotal, sub_msg_id, price, charge_count, msg_format, "
				+ "err , dest_flag, msg_receive_time, msg_deal_time, msg_scan_time, msg_send_time," +
						" msg_report_time, check_user, cache_sn, country_cn, ori_mobile,rpt_seq,complete_content,is_encode, province, city,msg_guid,template_id)"
				+ " values (s_submit_message_send_history.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " +
						"sysdate, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)";
		Connection conn = null;
		PreparedStatement insql = null;
		try {
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			insql = conn.prepareStatement(sql);
			for (Object eachObj : list) {
				SmsMessage each = (SmsMessage) eachObj;
				insql.setLong(1, each.getSubmit_sn());
				insql.setInt(2, each.getUser_sn());
				insql.setString(3, each.getUser_id());
				insql.setString(4, each.getService_code());
				insql.setString(5, each.getExt_code());
				insql.setString(6, each.getUser_ext_code());
				insql.setString(7, each.getTd_code());
				insql.setString(8, each.getSp_number());
				insql.setInt(9, each.getFilter_flag());
				insql.setString(10, each.getMobile());
				insql.setString(11, each.getMsg_content());
				insql.setString(12, each.getMsg_id());

				if (each.getMsg_send_time() != null) {
					insql.setString(13, each.getMsg_send_time()
							.substring(0, 19));
				} else {
					insql.setString(13,
							each.getMsg_receive_time().substring(0, 19));
				}

				insql.setInt(14, each.getStatus());
				insql.setInt(15, each.getResponse());
				insql.setString(16, each.getFail_desc());
				insql.setString(17, each.getTmp_msg_id());
				insql.setInt(18, each.getStat_flag());
				insql.setInt(19, each.getPknumber());
				insql.setInt(20, each.getPktotal());
				insql.setInt(21, each.getSub_msg_id());
				insql.setDouble(22, each.getPrice());
				insql.setInt(23, each.getCharge_count());
				insql.setInt(24, each.getMsg_format());
				String err = each.getErr();
				try {
					if (err == null) {
						err = String.valueOf(each.getResponse());
					}
				} catch (Exception e) {
					err = "error";
				}

				insql.setString(25, err);
				insql.setString(26, each.getDest_flag());
				insql.setString(27, each.getMsg_receive_time());
				insql.setString(28, each.getMsg_deal_time());
				insql.setString(29, each.getMsg_scan_time());
				insql.setString(30, each.getMsg_send_time());
				insql.setString(31, each.getMsg_report_time());
				insql.setString(32, each.getCheck_user());
				insql.setInt(33, each.getCache_sn());
				insql.setString(34, each.getCountry_cn());
				insql.setString(35, each.getOri_mobile());
				insql.setLong(36, each.getRpt_seq());
				insql.setString(37, each.getComplete_content());
				insql.setInt(38, each.getIs_encode());
				// 写入省市
				DaoUtil.setArea(mobileAreaCache.getMobileArea(), insql, each, 39, 40);
				insql.setString(41, each.getMsg_guid());
                insql.setString(42, each.getTemplate_id());
				insql.addBatch();
			}
			insql.executeBatch();
			result = true;
			conn.commit();
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, insql);
		}

		return result;
	}

	public boolean insert2SubmitMessageHistory(List<SmsMessage> list) {
		boolean result = false;
		String sql = "insert into submit_message_send_history "
				+ "(sn, submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, filter_flag, mobile, msg_content, msg_id, "
				+ "insert_time, update_time, status, response, fail_desc, tmp_msg_id, stat_flag, pknumber, pktotal, sub_msg_id, price, charge_count, msg_format, "
				+ "err , dest_flag, msg_receive_time, msg_deal_time, msg_scan_time, msg_send_time," +
						" msg_report_time, check_user, cache_sn, country_cn, ori_mobile,rpt_seq,complete_content,is_encode, province, city,msg_guid,template_id)"
				+ " values (s_submit_message_send_history.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " +
						"sysdate, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)";
		Connection conn = null;
		PreparedStatement insql = null;
		try {
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			insql = conn.prepareStatement(sql);
			int count = 0;
			for (SmsMessage each : list) {
				insql.setLong(1, each.getSubmit_sn());
				insql.setInt(2, each.getUser_sn());
				insql.setString(3, each.getUser_id());
				insql.setString(4, each.getService_code());
				insql.setString(5, each.getExt_code());
				insql.setString(6, each.getUser_ext_code());
				insql.setString(7, each.getTd_code());
				insql.setString(8, each.getSp_number());
				insql.setInt(9, each.getFilter_flag());
				insql.setString(10, each.getMobile());
				insql.setString(11, each.getMsg_content());
				insql.setString(12, each.getMsg_id());

				if (each.getMsg_send_time() != null) {
					insql.setString(13, each.getMsg_send_time()
							.substring(0, 19));
				} else {
					insql.setString(13,
							each.getMsg_receive_time().substring(0, 19));
				}

				insql.setInt(14, each.getStatus());
				insql.setInt(15, each.getResponse());
				insql.setString(16, each.getFail_desc());
				insql.setString(17, each.getTmp_msg_id());
				insql.setInt(18, each.getStat_flag());
				insql.setInt(19, each.getPknumber());
				insql.setInt(20, each.getPktotal());
				insql.setInt(21, each.getSub_msg_id());
				insql.setDouble(22, each.getPrice());
				insql.setInt(23, each.getCharge_count());
				insql.setInt(24, each.getMsg_format());
				String err = each.getErr();
				try {
					if (err == null) {
						err = String.valueOf(each.getResponse());
					}
				} catch (Exception e) {
					err = "error";
				}

				insql.setString(25, err);
				insql.setString(26, each.getDest_flag());
				insql.setString(27, each.getMsg_receive_time());
				insql.setString(28, each.getMsg_deal_time());
				insql.setString(29, each.getMsg_scan_time());
				insql.setString(30, each.getMsg_send_time());
				insql.setString(31, each.getMsg_report_time());
				insql.setString(32, each.getCheck_user());
				insql.setInt(33, each.getCache_sn());
				insql.setString(34, each.getCountry_cn());
				insql.setString(35, each.getOri_mobile());
				insql.setLong(36, each.getRpt_seq());
				insql.setString(37, each.getComplete_content());
				insql.setInt(38, each.getIs_encode());
				// 写入省市
				DaoUtil.setArea(mobileAreaCache.getMobileArea(), insql, each, 39, 40);
				insql.setString(41, each.getMsg_guid());
				String template_id = each.getTemplate_id();
				if(template_id==null){
					template_id = "";
				}
                insql.setString(42, template_id);

				//todo 一样
				//必达短信标识和批次号
				/*insql.setInt(43, Integer.valueOf(String.valueOf(each.getExtraField("is_must_arrive"))));
				insql.setString(44, (String)each.getExtraField("arrive_number"));*/
				insql.addBatch();
				count++;
				if (count > 50) {
					insql.executeBatch();
					count = 0;
				}
			}
			insql.executeBatch();
			result = true;
			conn.commit();
		} catch (SQLException e) {
            log.error("SQL = " + sql + "|" + list, e);
		} finally {
			DBUtil.freeConnection(conn, insql);
		}

		return result;
	}

	public void insertIntoSubmitMessageCatch(List<Object> list) {
		String sql = "insert into submit_message_send_catch "
				+ "(submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, filter_flag, mobile, msg_content, msg_id, "
				+ "insert_time, update_time, status, response, fail_desc, tmp_msg_id, pknumber, pktotal, sub_msg_id, price, charge_count, msg_format, dest_flag, "
				+ "msg_receive_time, msg_deal_time, msg_scan_time, msg_send_time, check_user," +
						" cache_sn, country_cn, ori_mobile,complete_content,is_encode,province, city,msg_guid,template_id)"
				+ " values (s_submit_message_send_catch.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, sysdate, sysdate, " +
						"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?,?,?,?,?,?,?)";

		Connection conn = null;
		PreparedStatement insql = null;
		try {
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			insql = conn.prepareStatement(sql);
			for (Object eachObj : list) {
				SmsMessage each = (SmsMessage) eachObj;
				insql.setInt(1, each.getUser_sn());
				insql.setString(2, each.getUser_id());
				insql.setString(3, each.getService_code());
				insql.setString(4, each.getExt_code());
				insql.setString(5, each.getUser_ext_code());
				insql.setString(6, each.getTd_code());
				insql.setString(7, each.getSp_number());
				insql.setInt(8, each.getFilter_flag());
				insql.setString(9, each.getMobile());
				insql.setString(10, each.getMsg_content());
				insql.setString(11, each.getMsg_id());
				insql.setInt(12, each.getStatus());
				insql.setInt(13, each.getResponse());
				insql.setString(14, each.getFail_desc());
				insql.setString(15, each.getTmp_msg_id());
				insql.setInt(16, each.getPknumber());
				insql.setInt(17, each.getPktotal());
				insql.setInt(18, each.getSub_msg_id());
				insql.setDouble(19, each.getPrice());
				insql.setInt(20, each.getCharge_count());
				insql.setInt(21, each.getMsg_format());
				insql.setString(22, each.getDest_flag());
				insql.setString(23, each.getMsg_receive_time());
				insql.setString(24, each.getMsg_deal_time());
				insql.setString(25, each.getMsg_scan_time());
				insql.setString(26, each.getMsg_send_time());
				insql.setString(27, each.getCheck_user());
				insql.setInt(28, each.getCache_sn());
				insql.setString(29, each.getCountry_cn());
				insql.setString(30, each.getOri_mobile());
				insql.setString(31, each.getComplete_content());
				insql.setInt(32, each.getIs_encode());
				// 写入省市
				DaoUtil.setArea(mobileAreaCache.getMobileArea(), insql, each, 33, 34);
				insql.setString(35, each.getMsg_guid());
				String template_id = each.getTemplate_id();
				if(template_id==null){
					template_id = "";
				}
                insql.setString(36,template_id);
                //todo 一样
				//必达短信标识和批次号
				/*insql.setInt(37, Integer.valueOf(String.valueOf(each.getExtraField("is_must_arrive"))));
				insql.setString(38, (String)each.getExtraField("arrive_number"));*/
				insql.addBatch();
			}
			insql.executeBatch();
			conn.commit();
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, insql);
		}
	}

	public List<SmsMessage> selectLongMsgTimeOut(int limit) {
		List<SmsMessage> resultList = null;
		String sql = "select  submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, filter_flag, mobile, msg_content, msg_id, insert_time, update_time, status, pknumber, pktotal, sub_msg_id, price, charge_count, msg_format, dest_flag, msg_receive_time, country_cn, ori_mobile,extraFields"
				+ " from submit_message_long  where insert_time < SYSDATE-(1450/1440) and ROWNUM<= "
				+ limit; // 1450minute 为1天 10分钟 60*24=1440
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			resultList = com.hskj.utils.ResultUtil.assemble(rs, SmsMessage.class);
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}
		return resultList;
	}

	public List<SmsMessage> selectCatchTimeOut() {
		String sql_select = "select submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, filter_flag, mobile, msg_content, msg_id,  insert_time, update_time, status, response, fail_desc, tmp_msg_id, pknumber, pktotal, sub_msg_id, price, charge_count, msg_format, dest_flag, msg_receive_time, msg_deal_time, msg_scan_time, "
				+ "msg_send_time, check_user, cache_sn, country_cn, ori_mobile from submit_message_send_catch  where insert_time < sysdate - 3 and ROWNUM<= 1000";

		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		List<SmsMessage> catch_list = new ArrayList<SmsMessage>();
		try {
			conn = dataSource.getConnection();
			stmt = conn.prepareStatement(sql_select);
			rs = stmt.executeQuery();
			catch_list = com.hskj.utils.ResultUtil.assemble(rs, SmsMessage.class);
		} catch (SQLException e) {
			log.error("", e);
		} finally {
			DBUtil.freeConnection(conn, stmt, rs);
		}
		return catch_list;
	}

	public List<SendMessageTiming> getSendMessageTimingList(int limit,int status) {
		List<SendMessageTiming> resultList = new ArrayList<SendMessageTiming>();
		String sql = "select sn,batch_number,user_id,service_code,mobile,msg_content,msg_id,submit_ext_code,send_time,send_status,send_desc, is_interface_send,sms_message from (select   sn,batch_number,user_id,service_code,mobile,msg_content,msg_id,submit_ext_code,send_time,send_status,send_desc,is_interface_send,sms_message from  send_message_timing  where send_status= ? and   to_date(send_time,'yyyy-mm-dd hh24:mi:ss')  < sysdate ) where rownum <= ?";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.setInt(1, status);
			ps.setInt(2, limit);
			rs = ps.executeQuery();
			resultList = ResultUtil.assemble(rs, SendMessageTiming.class);
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}
		return resultList;
	}
	public int updateSendMessageTimingList(String sql, int status) {
		   int result = 0 ;
			Connection conn = null;
			PreparedStatement ps = null;
			try {
				conn = dataSource.getConnection();
				conn.setAutoCommit(false);
				ps = conn.prepareStatement(sql);
				ps.setInt(1, status);
				result = ps.executeUpdate();
				conn.commit() ;
			} catch (Exception e) {
				try {
					conn.rollback();
				} catch (SQLException e1) {
				}
				log.error("SQL = " + sql, e);
			} finally {
				DBUtil.freeConnection(conn, ps);
			}
			return result ;
	}

	@Override
	public List<SendMessageTiming> getSendMessageTimingHistoryList(int limit,int status) {
		List<SendMessageTiming> resultList = new ArrayList<SendMessageTiming>();
		String sql = "select sn,batch_number,send_status from ( select sn,batch_number,send_status from  send_message_timing_history  where stat_flag= ? ) where rownum <= ?";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.setInt(1, status);
			ps.setInt(2, limit);
			rs = ps.executeQuery();
			resultList = ResultUtil.assemble(rs, SendMessageTiming.class);
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}
		return resultList;
	}

	@Override
	public int updateMsgTimingBatchDetail(String number, BatchModel model) {
		int count = 0;
		Connection conn = null;
		PreparedStatement ps = null;
		String sql = "update msg_timing_batch_detail set success_count = success_count+"+model.getSuccess_count()+",fail_count=fail_count+"+model.getFail_count() +" where batch_number = ?" ;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.setString(1, number);
			count = ps.executeUpdate();
			conn.commit();
		} catch (Exception e) {
			log.error("sql= "+sql, e);
		}finally{
			DBUtil.freeConnection(conn, ps);
		}
		return count;
	}

	@Override
	public List<BatchModel> getBatchList(int limit, int status) {
		List<BatchModel> resultList = new ArrayList<BatchModel>();
		String sql = "select * from ( select batch_number,batch_count,success_count,fail_count,send_time,send_status from  msg_timing_batch_detail where send_status!=? ) where rownum <= ?";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.setInt(1, status);
			ps.setInt(2, limit);
			rs = ps.executeQuery();
			while (rs.next()) {
				BatchModel tmpForm = new BatchModel();
				tmpForm.setBatch_number(rs.getString("batch_number"));
				tmpForm.setBatch_count(rs.getInt("batch_count"));
				tmpForm.setSuccess_count(rs.getInt("success_count"));
				tmpForm.setFail_count(rs.getInt("fail_count"));
				tmpForm.setSend_status(rs.getInt("send_status"));
				tmpForm.setSend_time(rs.getString("send_time"));
				resultList.add(tmpForm);;
			}
		} catch (SQLException e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}
		return resultList;
	
	}

	public void updateSubmitMessageArriveReplyList(List<SubmitMessageArriveReply> list) throws Exception{
        int trys = 3;
        while(trys -- > 0){
            int affects = updateSubmitMessageArriveReplyListSub(list);
            if(affects == list.size()){
                trys = 0;
            }else{
                Thread.sleep(2000);
            }
        }
	}

    private int updateSubmitMessageArriveReplyListSub(List<SubmitMessageArriveReply> list)  throws Exception{
        Connection conn = null;
        PreparedStatement ps = null;
        String sql = "update submit_message_arrive_reply set err_code=?,err_msg=?,remark=?,msg_report_time=?,update_time=sysdate where md5_index=?";
        int actualAffects = 0;
        try {
            conn = dataSource.getConnection();
            if(conn != null){
                conn.setAutoCommit(false);
                ps = conn.prepareStatement(sql);

                if(list != null && list.size() > 0){
                    for(int i = 0; i < list.size(); i ++){
                        SubmitMessageArriveReply form = list.get(i);
                        if(form != null){
                            ps.setString(1, form.getErr_code());
                            ps.setString(2, form.getErr_msg());
                            ps.setString(3, form.getRemark());
                            ps.setString(4, form.getMsg_report_time());
                            String msgId = form.getMsg_id().trim();
                            String userId = form.getUser_id().trim();
                            String mobile = form.getMobile().trim();
                            String md5Index = Md5Util.md5((msgId + userId + mobile).getBytes());
                            ps.setString(5, md5Index);
                            ps.addBatch();
                            if(log.isDebugEnabled()){
                                log.debug("updateSubmitMessageArriveReplyList, msg_id=" + msgId + ", user_id=" + userId + ", mobile=" + mobile + ", md5Index=" + md5Index);
                            }
                        }
                    }

                    int[] counts = ps.executeBatch();
                    conn.commit();
                    conn.setAutoCommit(true);

                    if (counts == null) {
                        log.error("updateSubmitMessageArriveReplyList batch update error, sql-" + sql);
                    } else {
                        for (int i = 0; i < counts.length; i++) {
                            actualAffects += (counts[0] > 0 ? 1 : 0);
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.error("sql: "+sql , e);

            if(conn != null){
                conn.rollback();
                conn.setAutoCommit(true);
            }

            throw e;
        }finally{
            DBUtil.freeConnection(conn, ps);
        }

        return actualAffects;
    }
	
	public void updateSubmitMessageArriveReply(SubmitMessageArriveReply form) throws Exception{
		//中信建投定制不用支持oracle数据库
        form.setUpdate_time(DateUtil.currentTime());
        String sql = "update submit_message_arrive_reply set err_code=?,err_msg=?,remark=?,msg_report_time=?,update_time=? where md5_index=? ";

        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = dataSource.getConnection();
            ps = conn.prepareStatement(sql);
            ps.setString(1, form.getErr_code());
            ps.setString(2, form.getErr_msg());
            ps.setString(3, form.getRemark());
            ps.setString(4, form.getMsg_report_time());
            ps.setString(5, form.getUpdate_time());
            String msgId = form.getMsg_id().trim();
            String userId = form.getUser_id().trim();
            String mobile = form.getMobile().trim();
            String md5Index = Md5Util.md5((msgId + userId + mobile).getBytes());
            ps.setString(6, md5Index);
            ps.execute();
            if(log.isDebugEnabled()){
                log.debug("updateSubmitMessageArriveReply, msg_id=" + msgId + ", user_id=" + userId + ", mobile=" + mobile + ",  md5Index=" + md5Index);
            }
        } catch (Exception e) {
            log.error("sql: "+sql , e);
            throw e;
        }finally{
            DBUtil.freeConnection(conn,ps);
        }
	}
	
	public void insertSubmitMessageArriveReplyList(List<SubmitMessageArriveReply> list) throws Exception{
        Connection conn = null;
        PreparedStatement ps = null;
        String sql = "insert into submit_message_arrive_reply (sn,user_id,mobile,msg_content,err_code,err_msg,remark,msg_id,arrive_time_limit,msg_receive_time,msg_report_time,insert_time,update_time,md5_index)"
                + " values (s_submit_message_arrive_reply.nextval,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, sysdate, sysdate, ?)";
        try {
            conn = dataSource.getConnection();
            if(conn != null){
                conn.setAutoCommit(false);
                ps = conn.prepareStatement(sql);

                if(list != null && list.size() > 0){
                    for(int i = 0; i < list.size(); i ++){
                        SubmitMessageArriveReply form = list.get(i);
                        if(form != null){
                            ps.setString(1, form.getUser_id());
                            ps.setString(2, form.getMobile());
                            ps.setString(3, form.getMsg_content());
                            ps.setString(4, form.getErr_code());
                            ps.setString(5, form.getErr_msg());
                            ps.setString(6, form.getRemark());
                            ps.setString(7, form.getMsg_id());
                            ps.setInt(8, form.getArrive_time_limit());
                            ps.setString(9, form.getMsg_receive_time());
                            ps.setString(10, form.getMsg_report_time());
                            String msgId = form.getMsg_id().trim();
                            String userId = form.getUser_id().trim();
                            String mobile = form.getMobile().trim();
                            String md5Index = Md5Util.md5((msgId + userId + mobile).getBytes());
                            ps.setString(11, md5Index);
                            ps.addBatch();
                        }
                    }

                    int[] counts = ps.executeBatch();
                    conn.commit();
                    conn.setAutoCommit(true);

                    if(counts == null){
                        log.error("insertSubmitMessageArriveReplyList batch insert error, sql-" + sql);
                    }
                }
            }
        } catch (Exception e) {
            log.error("sql: "+sql , e);

            if(conn != null){
                conn.rollback();
                conn.setAutoCommit(true);
            }

            throw e;
        }finally{
            DBUtil.freeConnection(conn,ps);
        }
	}
	
	public void insertSubmitMessageArriveReply(SubmitMessageArriveReply form) throws Exception{
		//中信建投定制不用支持oracle数据库
        String sql = "insert into submit_message_arrive_reply (sn,user_id,mobile,msg_content,err_code,err_msg,remark,msg_id,arrive_time_limit,msg_receive_time,msg_report_time,insert_time,update_time,md5_index)"
                + " values (s_submit_message_arrive_reply.nextval,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, sysdate, sysdate, ?)";

        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = dataSource.getConnection();
            if(conn != null){
                ps = conn.prepareStatement(sql);
                ps.setString(1, form.getUser_id());
                ps.setString(2, form.getMobile());
                ps.setString(3, form.getMsg_content());
                ps.setString(4, form.getErr_code());
                ps.setString(5, form.getErr_msg());
                ps.setString(6, form.getRemark());
                ps.setString(7, form.getMsg_id());
                ps.setInt(8, form.getArrive_time_limit());
                ps.setString(9, form.getMsg_receive_time());
                ps.setString(10, form.getMsg_report_time());
                String msgId = form.getMsg_id().trim();
                String userId = form.getUser_id().trim();
                String mobile = form.getMobile().trim();
                String md5Index = Md5Util.md5((msgId + userId + mobile).getBytes());
                ps.setString(11, md5Index);
                ps.execute();
            }
        } catch (Exception e) {
            log.error("sql: "+sql , e);
            throw e;
        }finally{
            DBUtil.freeConnection(conn,ps);
        }
	}

	@Override
	public void insertIntoSubmitMessageDisturb(List<?> smsList, String tableName) {

        String sql = "insert  into " + tableName
                + "(submit_sn,user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, filter_flag, mobile, msg_content, msg_id, insert_time, update_time, status, response, fail_desc, tmp_msg_id, stat_flag, sub_msg_id,pknumber, pktotal, price, charge_count, msg_format, err , dest_flag, msg_receive_time, msg_deal_time, msg_scan_time, msg_send_time, msg_report_time, check_user, cache_sn, country_cn, ori_mobile, signature,operator_signature,istest,area_code,complete_content,report_fail_desc,try_times,md5_index,src_number,do_times, rpt_seq, is_encode,msg_guid,template_id,extraFields,queue_name,disturb_start_time,disturb_end_time,disturb_insert_time)"
                + " values (s_submit_message_disturb.nextval,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'))";
        Connection conn = null;
        PreparedStatement insql = null;
        try {
            conn = dataSource.getConnection();
            insql = conn.prepareStatement(sql);
            for (Object eachObj : smsList) {
                SmsMessage each = (SmsMessage) eachObj;
                insql.setInt(1, each.getUser_sn());
                insql.setString(2, each.getUser_id());
                insql.setString(3, each.getService_code());
                insql.setString(4, each.getExt_code());
                insql.setString(5, each.getUser_ext_code());
                insql.setString(6, each.getTd_code());
                insql.setString(7, each.getSp_number());
                insql.setInt(8, each.getFilter_flag());
                insql.setString(9, each.getMobile());
                insql.setString(10, each.getMsg_content());
                insql.setString(11, each.getMsg_id());
                insql.setString(12, each.getInsert_time());
                insql.setString(13, each.getUpdate_time());
                insql.setInt(14, each.getStatus());
                insql.setInt(15, each.getResponse());
                insql.setString(16, each.getFail_desc());
                insql.setString(17, each.getTmp_msg_id());
                insql.setInt(18, each.getStat_flag());
                insql.setInt(19, each.getSub_msg_id());
                insql.setInt(20, each.getPknumber());
                insql.setInt(21, each.getPktotal());
                insql.setDouble(22, each.getPrice());
                insql.setInt(23, each.getCharge_count());
                insql.setInt(24, each.getMsg_format());
                insql.setString(25, each.getErr());
                insql.setString(26, each.getDest_flag());
                insql.setString(27, each.getMsg_receive_time());
                insql.setString(28, each.getMsg_deal_time());
                insql.setString(29, each.getMsg_scan_time());
                insql.setString(30, each.getMsg_send_time());
                insql.setString(31, each.getMsg_report_time());
                insql.setString(32, each.getCheck_user());
                insql.setInt(33, each.getCache_sn());
                insql.setString(34, each.getCountry_cn());
                insql.setString(35, each.getOri_mobile());
                insql.setString(36, each.getSignature());
                insql.setString(37, each.getOperator_signature());
                insql.setString(38, each.getIstest());
                insql.setString(39, each.getArea_code());
                insql.setString(40, each.getComplete_content());
                insql.setString(41, each.getReport_fail_desc());
                insql.setInt(42, each.getTry_times());
                insql.setString(43, each.getMd5_index());
                insql.setString(44, each.getSrc_number());
                insql.setInt(45, each.getDo_times());
                insql.setLong(46, each.getRpt_seq());
                insql.setInt(47, each.getIs_encode());
                insql.setString(48, each.getMsg_guid());
                insql.setString(49, each.getTemplate_id());
                String extraStr = "";
                if(each.getExtraFields()!=null){
                	extraStr = JSON.toJSONString(each.getExtraFields());
                }
                insql.setString(50, extraStr);
                insql.setString(51, (String) each.getExtraField("queue_name"));
                insql.setString(52, (String) each.getExtraField("disturb_start_time"));
                insql.setString(53, (String) each.getExtraField("disturb_end_time"));
                insql.addBatch();
            }

            insql.executeBatch();
        } catch (Exception e) {
            log.error("SQL = " + sql, e);
        } finally {
            DBUtil.freeConnection(conn, insql);
        }
	}

	
	//需要转换成对应的表字段
	@Override
	public void insertIntoFixedTimeMessage(List<?> smsList, String tableName) {

        String sql = "insert  into " + tableName
                + "(sn,batch_number, user_id, service_code, mobile, msg_content, msg_id, submit_ext_code, insert_time, rece_time, send_time, send_status, send_desc, stat_flag,is_interface_send,sms_message)"
                + " values (s_send_message_timing.nextval,?,?,?,?,?,?,?,to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'),?,?,0,'',0,?,?)";
        Connection conn = null;
        PreparedStatement insql = null;
        try {
            conn = dataSource.getConnection();
            insql = conn.prepareStatement(sql);
            for (Object eachObj : smsList) {
            	SendMessageTiming each = (SendMessageTiming) eachObj;
                insql.setString(1, each.getBatch_number());
                insql.setString(2, each.getUser_id());
                insql.setString(3, each.getService_code());
                insql.setString(4, each.getMobile());
                insql.setString(5, each.getMsg_content());
                insql.setString(6, each.getMsg_id());
                insql.setString(7, each.getSubmit_ext_code());
                insql.setString(8, each.getRece_time());
                insql.setString(9, each.getSend_time());
                insql.setInt(10, each.getIs_interface_send());
                SmsMessage sms = each.getSms_message();
                String smsStr = "";
                if(sms!=null){
                	smsStr = JSON.toJSONString(sms);
                }
                insql.setString(11, smsStr);
                insql.addBatch();
            }

            insql.executeBatch();
        } catch (Exception e) {
            log.error("SQL = " + sql, e);
        } finally {
            DBUtil.freeConnection(conn, insql);
        }
	}
	
	
	@Override
	public List<SmsMessage> querySubmitMessageDisturbForSend(int limit) {
        List<SmsMessage> resultList = new ArrayList<SmsMessage>();

        String selectCols = "submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, filter_flag, mobile, msg_content, msg_id, insert_time, update_time, status, response, fail_desc, tmp_msg_id, stat_flag, sub_msg_id,pknumber, pktotal, price, charge_count, msg_format, err , dest_flag, msg_receive_time, msg_deal_time, msg_scan_time, msg_send_time, msg_report_time, check_user, cache_sn, country_cn, ori_mobile, signature,operator_signature,istest,area_code,complete_content,report_fail_desc,try_times,md5_index,src_number,do_times, rpt_seq, is_encode,msg_guid,template_id,extraFields";
        String sql =  "select " + selectCols + " from ((select " + selectCols + " from submit_message_disturb where disturb_start_time <= ? and disturb_end_time >= ?) union all (select " + selectCols + " from submit_message_disturb where disturb_start_time <= ? and disturb_end_time >= ?)) t1 WHERE ROWNUM <= "  + limit;

        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            conn = dataSource.getConnection();
            ps = conn.prepareStatement(sql);
            String curHm = DateUtil.currentHourMin();
            ps.setString(1, curHm);
            ps.setString(2, curHm);
            String incr24Hm = DateUtil.addHour(curHm, 24);
            ps.setString(3, incr24Hm);
            ps.setString(4, incr24Hm);
            rs = ps.executeQuery();
            resultList = com.hskj.utils.ResultUtil.assemble(rs, SmsMessage.class);
        } catch (Exception e) {
            log.error("SQL = " + sql, e);
        } finally {
            DBUtil.freeConnection(conn, ps, rs);
        }

        return resultList;
	}
	
	
	
	

	@Override
	public boolean insert2ExceptionalMobileDeal(List<SmsMessage> list) {
        boolean result = false;
        String sql = "insert  into exceptional_mobile_deal (sn,mobile,user_id,template_id,err_code,err_msg,operator,insert_time,update_time) values (s_exceptional_mobile_deal.nextval,?,?,?,?,?,?,sysdate,sysdate)";
        Connection conn = null;
        PreparedStatement insql = null;
        try {
            conn = dataSource.getConnection();
            conn.setAutoCommit(false);
            insql = conn.prepareStatement(sql);
            for (SmsMessage each : list) {
                insql.setString(1, each.getMobile());
                insql.setString(2, each.getUser_id());
                insql.setString(3, each.getTemplate_id());
                insql.setString(4, each.getErr());
                insql.setString(5, each.getFail_desc());
                insql.setString(6, "system");
                insql.addBatch();
            }
            insql.executeBatch();
            result = true;
            conn.commit();
        } catch (Exception e) {
            log.error("SQL = " + sql + "|" + list, e);
        } finally {
            DBUtil.freeConnection(conn, insql);
        }
        return result;
	}

	@Override
	public List<CheckMsgBatch> getAuditedCheckMsgBatch(int limit) {
		List<CheckMsgBatch> resultList = null;
		String selectCols = "sn, batch_number, user_id, send_type, batch_count, batch_content, insert_time, update_time, check_time, timing_time, check_user, check_status, md5_index,remark";
		String sql = "select " + selectCols + " from ((select " + selectCols + " from check_msg_batch where check_status=1) union all (select " + selectCols + " from check_msg_batch where check_status=2)) t where ROWNUM <= ?";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.setInt(1, limit);
			rs = ps.executeQuery();
			resultList = com.hskj.utils.ResultUtil.assemble(rs, CheckMsgBatch.class);
		} catch (Exception e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}

		return resultList;
	}

	
	
	@Override
	public void updateCheckMessage(List<CheckMsgBatch> checkMsgBatchs) {
		if (checkMsgBatchs == null || checkMsgBatchs.size() < 1) {
			return;
		}

		String sql = "update check_message set check_status=?,check_user=?, timing_time=?,remark=?, update_time=to_char(sysdate,'YYYY-MM-DD HH24:MI:SS') where batch_number=?";
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);

			int size = checkMsgBatchs.size();
			for (int i = 0; i < size; i++) {
				CheckMsgBatch checkMsgBatch = checkMsgBatchs.get(i);
				ps.setInt(1, checkMsgBatch.getCheck_status());
				ps.setString(2, checkMsgBatch.getCheck_user());
				ps.setString(3, checkMsgBatch.getTiming_time());
				ps.setString(4, checkMsgBatch.getRemark());
				ps.setString(5, checkMsgBatch.getBatch_number());
				ps.addBatch();
			}

			ps.executeBatch();
		} catch (Exception e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps);
		}
	}
	
	@Override
	public List<CheckMessage> getAuditedCheckMessage(int limit) {
		List<CheckMessage> resultList = null;
		String selectCols = " sn, batch_number, user_id, service_code, mobile, msg_content, msg_id, submit_ext_code, insert_time, update_time, send_time, timing_time, check_status, check_user, move_flag,is_interface_send,sms_message ";
		String sql = "select " + selectCols + " from ((select " + selectCols + " from check_message where check_status=1) union all (select " + selectCols
				+ " from check_message where check_status=2)) t where ROWNUM <= ?";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.setInt(1, limit);
			rs = ps.executeQuery();
			resultList = com.hskj.utils.ResultUtil.assemble(rs, CheckMessage.class);
		} catch (Exception e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}

		return resultList;
	}

	@Override
	public List<CheckMsgBatch> getUnCheckedMsgBatch(int size) {
		List<CheckMsgBatch> resultList = null;
		String selectCols = "sn, batch_number, user_id, send_type, batch_count, batch_content, insert_time, update_time, check_time, timing_time, check_user, check_status, md5_index,remark";
		String sql = "select " + selectCols + " from check_msg_batch where message_check_flag=0 and ROWNUM <= ?";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.setInt(1, size);
			rs = ps.executeQuery();
			resultList = com.hskj.utils.ResultUtil.assemble(rs, CheckMsgBatch.class);
		} catch (Exception e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}

		return resultList;
	}

	@Override
	public void updateMessageCheckFlag(String condition) {
		
		if (StringUtils.isBlank(condition)) {
			return;
		}

		String sql = "update check_msg_batch set message_check_flag=1 where sn in ( "+condition+" )";
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.executeUpdate();
		} catch (Exception e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps);
		}
		
	}

	@Override
	public List<TmpInformCust> getContractConfirmMsg(int size) {
		List<TmpInformCust> resultList = null;
		String selectCols = "sn, accno, prim_flag, custno, mobile, status, cust_name, try_times, send_time";
		String sql = "select " + selectCols + " from tmp_inform_cust where status=0 and ROWNUM <= ?";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.setInt(1, size);
			rs = ps.executeQuery();
			resultList = com.hskj.utils.ResultUtil.assemble(rs, TmpInformCust.class);
		} catch (Exception e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}

		return resultList;
	}
	
	public List<TmpInformCust> getContractConfirmMsg(int start,int end) {
		List<TmpInformCust> resultList = null;
		String selectCols = "sn, accno, prim_flag, custno, mobile, status, cust_name, try_times, send_time";
		String sql = "select " + selectCols + " from tmp_inform_cust where status=0 and sn >= ? and sn <= ?";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.setInt(1, start);
			ps.setInt(2, end);
			rs = ps.executeQuery();
			resultList = com.hskj.utils.ResultUtil.assemble(rs, TmpInformCust.class);
		} catch (Exception e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}

		return resultList;
	}
	
	/**
	 * 获取签约待确认表中的max和min的值
	 * @return
	 */
	public Map<String, Integer> geContractConfirmMsg() {
		Map<String, Integer> result = new HashMap<String, Integer>();
		String sql = "select max(SN) max,min(SN) min from  TMP_INFORM_CUST  where status=0 ";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				result.put("max", rs.getInt("max"));
				result.put("min", rs.getInt("min"));
			}

		} catch (SQLException e) {
			log.error("sql: "+sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps, rs);
		}
		return result;
	}

	@Override
	public void updateTmpInformCust(String condition) {
		if (StringUtils.isBlank(condition)) {
			return;
		}

		String sql = "update tmp_inform_cust set try_times=try_times+1,send_time=to_char(sysdate,'YYYY-MM-DD HH24:MI:SS') where sn in ( "+condition+" )";
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.executeUpdate();
		} catch (Exception e) {
			log.error("SQL = " + sql, e);
		} finally {
			DBUtil.freeConnection(conn, ps);
		}
	}

	@Override
	public void updateCustInfoStatus(List<String> updateCustInfoList) {
		if (updateCustInfoList!=null&&updateCustInfoList.size()>0) {
			String sql = "update cust_info set status=2,modi_time=sysdate where accno=?";
			Connection conn = null;
			PreparedStatement ps = null;
			try {
				conn = dataSource.getConnection();
				ps = conn.prepareStatement(sql);
				for(String accno : updateCustInfoList){
					ps.setString(1, accno);
					ps.addBatch();
				}
				ps.executeBatch();
			} catch (Exception e) {
				log.error("SQL = " + sql, e);
			} finally {
				DBUtil.freeConnection(conn, ps);
			}
		}

		
	}

	@Override
	public void updateTmpInfoCustStatus(List<String> updateCustInfoList) {
		if (updateCustInfoList!=null&&updateCustInfoList.size()>0) {
			String sql = "update tmp_inform_cust set status=2 where accno=?";
			Connection conn = null;
			PreparedStatement ps = null;
			try {
				conn = dataSource.getConnection();
				ps = conn.prepareStatement(sql);
				for(String accno : updateCustInfoList){
					ps.setString(1, accno);
					ps.addBatch();
				}
				ps.executeBatch();
			} catch (Exception e) {
				log.error("SQL = " + sql, e);
			} finally {
				DBUtil.freeConnection(conn, ps);
			}
		}
	}

	@Override
	public List<SmsMessage> selectSubmitMessageSendHistory(int limit) {
		String sql_select = "select sn, submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, filter_flag, mobile, msg_content, msg_id, rpt_seq, insert_time, update_time, status, response, fail_desc, tmp_msg_id,stat_flag,sub_msg_id, pknumber, pktotal, price, country_cn,ori_mobile,charge_count, msg_format, err, dest_flag, msg_receive_time, msg_deal_time, msg_scan_time, msg_send_time, msg_report_time, check_user,cache_sn,complete_content, is_encode, msg_guid, province, city, template_id  from submit_message_send_history where rownum < ?";

		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		List<SmsMessage> sendHistList = new ArrayList<SmsMessage>();
		try {
			conn = dataSource.getConnection();
			stmt = conn.prepareStatement(sql_select);
			stmt.setInt(1, limit);
			rs = stmt.executeQuery();
			sendHistList = com.hskj.utils.ResultUtil.assemble(rs, SmsMessage.class);
		} catch (Exception e) {
			log.error("", e);
		} finally {
			DBUtil.freeConnection(conn, stmt, rs);
		}

		return sendHistList;
	}

	@Override
	public void copySendHisToSendHisCache(String condition) {
		//"sn, submit_sn, user_sn, user_id, service_code, ext_code, user_ext_code, td_code, sp_number, filter_flag, mobile, msg_content, complete_content, msg_id, rpt_seq, insert_time, update_time, status, response, fail_desc, tmp_msg_id, stat_flag,sub_msg_id,pknumber, pktotal, price, country_cn,ori_mobile,charge_count, msg_format, err, dest_flag, msg_receive_time, msg_deal_time, msg_scan_time, msg_send_time, msg_report_time, check_user, is_encode, province, city, cache_sn, msg_guid";
		String sql = "insert into submit_msg_send_his_cache  select * from submit_message_send_history where " + condition;
		
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			conn = dataSource.getConnection();
			stmt = conn.prepareStatement(sql);
			stmt.execute();
		} catch (Exception e) {
			log.error("", e);
		} finally {
			DBUtil.freeConnection(conn, stmt, rs);
		}
		
	}
	
}
