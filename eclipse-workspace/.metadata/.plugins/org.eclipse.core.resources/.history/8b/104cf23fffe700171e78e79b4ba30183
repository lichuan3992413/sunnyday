package sunnyday.controller.check;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import sunnyday.common.model.ErrCode;
import sunnyday.common.model.SmsMessage;
import sunnyday.common.model.UserBean;
import sunnyday.controller.cache.CheckCache;
import sunnyday.controller.cache.ErrCodeCache;
import sunnyday.controller.cache.GateConfigCache;
import sunnyday.controller.cache.UserInfoCache;
import sunnyday.controller.filter.FilterFactory;
import sunnyday.controller.filter.IFilter;
import sunnyday.controller.util.ConcatUtil;
import sunnyday.tools.util.CommonLogFactory;


/**
 * 对通过的信息做过滤
 * 1/判断是否为群发
 * 2/判断是否有生效的群发缓存
 * 根据缓存判断是拦截,通过,还是人工审核.
 * 
 * @author 1111182
 *
 */
public class ImpDoCheck_mass implements IDoCheck {
	private Logger log = CommonLogFactory.getCommonLog("infoLog");
	@Autowired
	private CheckCache checkCache;
	private IFilter filter = null;
	private ErrCode.codeName mass = ErrCode.codeName.massReject;
	
	public ImpDoCheck_mass(){
//		filter = new EhcacheBatchMsgBlockFilter();
//		filter.doStart();
		filter = FilterFactory.getMsgFilter(FilterFactory.REPEAT_FILTER);
		filter.doStart("massMsgFilter");
	}
	
	public int doCheck(SmsMessage sms) {
		int result = 1;
		String key = sms.getMd5_index();
		int timeInterval = 300;
		int maxMassNum = AccountCustomizedMassNumber(sms.getUser_id());
		int multiParam = sms.getPktotal() > 0 ? sms.getPktotal() : 1;
		int fixedMassNumber = (maxMassNum - 1) * multiParam;
		Object massRecord = filter.doFilter(key, timeInterval, fixedMassNumber);
//		System.out.println("群发监控过滤:" + key + " - result = " + massRecord);
		
		if(massRecord != null){
			//mass message, this checkMode hitted, result = 0;
			result = 0;
			
			sms.addExtraField("mass_id", fixedMassNumber + 1);
//			System.err.println((fixMassID >= maxMassNum) + " fixMassID = " + fixMassID + " 群发数量：" + mass_id + " 群发内容：" + sms.getComplete_content());
			//判定是否达到账户群发拦截限制
			if(isStrictTd(sms.getTd_code())){
				sms.setStatus(2);
				sms.setResponse(ErrCodeCache.getErrCode(mass).getResponse());
				sms.setErr(String.valueOf(ErrCodeCache.getErrCode(mass).getErr()));
				sms.setFail_desc(ErrCodeCache.getErrCode(mass).getFail_desc());
			}else{
				//filter mass cache
				int cacheResult = MessageCheckUtil.checkFromMap(sms, checkCache.getLastMap(), ErrCode.codeName.massCacheReject);//命中0  不命中 1
				if(cacheResult == 1){
					String fail_desc = ConcatUtil.concat(sms.getFail_desc(), ErrCodeCache.getErrCode(ErrCode.codeName.massManualReject).getFail_desc());
					fail_desc = fail_desc.replace("$", Integer.toString(fixedMassNumber));
					sms.setFail_desc(fail_desc);
					sms.setStatus(0);
				}
			}
		}else{
			result = 1;
		}
//		FilterCenter.doSomeFilter(each);
//		return checkCacheService.validate(vMsg.getSmsMessage());
//		System.out.println("群发监控后的状态 = " + sms.getFail_desc());
		//log.info("");
		if(result==0){
			log.info("[Check_mass-命中群发审核] user_id=" + sms.getUser_id()+ ", mobile:" + sms.getMobile() + ", content:"+ sms.getMsg_content());
		}
		
		return result;
	}

	private int AccountCustomizedMassNumber(String user_sn) {
		int result = -1;
		UserBean user = UserInfoCache.getUser_info().get(user_sn);
		if(user != null){
			result = user.getMax_mass_num();
		}
		return result;
	}

	private boolean isStrictTd(String tdCode) {
		boolean result = false;
		String striceTds = GateConfigCache.getValue("strict_yw");
		if(striceTds != null && tdCode != null && striceTds.contains(tdCode)){
			result = true;
		}
		return result;
	}
}
