package com.hskj.threads.persistence;

import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.hskj.callableTask.MustArriveReplyUpdateTask;
import com.hskj.dao.IMessageDAO;
import com.hskj.dataCenter.DataCenter_old;
import com.hskj.form.SubmitMessageArriveReply;
import com.hskj.log.CommonLogFactory;
import com.hskj.rao.GateRAO;
import com.hskj.thread.fremawork.Stoppable;

/**
 * 启动MustArriveReplyUpdateTask任务，将数据中心mustArriveReplyUpdateQueue队列中必达短信回执更新redis和数据库中必达短信回执
 */
@Service
public class MustArriveReplyUpdateThread extends Thread implements Stoppable{
	private Logger log = CommonLogFactory.getCommonLog("infoLog");
	private boolean isRunnable = true;
	@Resource(name="${db.type}_MessageDAO")
	private IMessageDAO dao;
	private int  COUNT = 1000;
	
	@Autowired
	private GateRAO redisGate;
	
	@Value("#{config.must_arrive_reply}")
	private String must_arrive_reply;
	
	@Value("#{config.must_arrive_valid_time}")
	private String must_arrive_valid_time;
	
	
	@Override
	public void run() {
		log.info("--------< 必达短信回执更新线程开启   >--------");
		while (isRunnable) {
			boolean flag = true;
			while (flag) {
				try {
					flag = false;
					int size = DataCenter_old.getDataToDbWorkQueue().remainingCapacity();
					if (size <= 20) {
						Thread.sleep(1000);
						log.warn("dataToDbWorkQueue[" + size + "]   Capacity is <= 20 .");
						flag = true;
						continue;
					}
					
					List<SubmitMessageArriveReply> list =  getMustArriveReplyUpdate();
					if(list!=null&&list.size()>0){
						if (!DataCenter_old.getDataToDbPool().isShutdown()) {
							DataCenter_old.getDataToDbPool().submit(new MustArriveReplyUpdateTask(dao,redisGate, list, must_arrive_reply, must_arrive_valid_time));
						}
					}else{
						sleep(100);
					}
					
				} catch (Exception e) {
					log.warn("MustArriveReplyUpdateThread"+ e);
				}
			
			}
			
		}
	}


	protected List<SubmitMessageArriveReply> getMustArriveReplyUpdate() {
		return DataCenter_old.getMustArriveReplyUpdateQueue(COUNT);
	}
	 
	@Override
	public boolean doStop() {
		isRunnable = false ;
		log.info("--------< 必达短信回执更新线程开启关闭   >--------");
		interrupt();
		return true;
	}
}
